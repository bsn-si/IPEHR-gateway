// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "hms/gateway/pkg/docs/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryService is a mock of QueryService interface.
type MockQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServiceMockRecorder
}

// MockQueryServiceMockRecorder is the mock recorder for MockQueryService.
type MockQueryServiceMockRecorder struct {
	mock *MockQueryService
}

// NewMockQueryService creates a new mock instance.
func NewMockQueryService(ctrl *gomock.Controller) *MockQueryService {
	mock := &MockQueryService{ctrl: ctrl}
	mock.recorder = &MockQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryService) EXPECT() *MockQueryServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockQueryService) Get(ctx context.Context, userID, qualifiedQueryName string) ([]model.StoredQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, qualifiedQueryName)
	ret0, _ := ret[0].([]model.StoredQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueryServiceMockRecorder) Get(ctx, userID, qualifiedQueryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueryService)(nil).Get), ctx, userID, qualifiedQueryName)
}

// Store mocks base method.
func (m *MockQueryService) Store(ctx context.Context, userID, qType, qualifiedQueryName string, q []byte) (model.StoredQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, userID, qType, qualifiedQueryName, q)
	ret0, _ := ret[0].(model.StoredQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockQueryServiceMockRecorder) Store(ctx, userID, qType, qualifiedQueryName, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockQueryService)(nil).Store), ctx, userID, qType, qualifiedQueryName, q)
}

// Validate mocks base method.
func (m *MockQueryService) Validate(data []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", data)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockQueryServiceMockRecorder) Validate(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockQueryService)(nil).Validate), data)
}
