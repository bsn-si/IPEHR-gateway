// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "hms/gateway/pkg/docs/model"
	processing "hms/gateway/pkg/docs/service/processing"
	user "hms/gateway/pkg/docs/service/user"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockUserHandlerService is a mock of UserHandlerService interface.
type MockUserHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerServiceMockRecorder
}

// MockUserHandlerServiceMockRecorder is the mock recorder for MockUserHandlerService.
type MockUserHandlerServiceMockRecorder struct {
	mock *MockUserHandlerService
}

// NewMockUserHandlerService creates a new mock instance.
func NewMockUserHandlerService(ctrl *gomock.Controller) *MockUserHandlerService {
	mock := &MockUserHandlerService{ctrl: ctrl}
	mock.recorder = &MockUserHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandlerService) EXPECT() *MockUserHandlerServiceMockRecorder {
	return m.recorder
}

// AddTokenInBlackList mocks base method.
func (m *MockUserHandlerService) AddTokenInBlackList(tokenRaw string, expires int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTokenInBlackList", tokenRaw, expires)
}

// AddTokenInBlackList indicates an expected call of AddTokenInBlackList.
func (mr *MockUserHandlerServiceMockRecorder) AddTokenInBlackList(tokenRaw, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTokenInBlackList", reflect.TypeOf((*MockUserHandlerService)(nil).AddTokenInBlackList), tokenRaw, expires)
}

// CreateToken mocks base method.
func (m *MockUserHandlerService) CreateToken(userID string) (*user.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID)
	ret0, _ := ret[0].(*user.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockUserHandlerServiceMockRecorder) CreateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockUserHandlerService)(nil).CreateToken), userID)
}

// ExtractToken mocks base method.
func (m *MockUserHandlerService) ExtractToken(bearToken string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", bearToken)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockUserHandlerServiceMockRecorder) ExtractToken(bearToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockUserHandlerService)(nil).ExtractToken), bearToken)
}

// ExtractTokenMetadata mocks base method.
func (m *MockUserHandlerService) ExtractTokenMetadata(token *jwt.Token) (*user.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTokenMetadata", token)
	ret0, _ := ret[0].(*user.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTokenMetadata indicates an expected call of ExtractTokenMetadata.
func (mr *MockUserHandlerServiceMockRecorder) ExtractTokenMetadata(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTokenMetadata", reflect.TypeOf((*MockUserHandlerService)(nil).ExtractTokenMetadata), token)
}

// GetTokenHash mocks base method.
func (m *MockUserHandlerService) GetTokenHash(tokenRaw string) [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenHash", tokenRaw)
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// GetTokenHash indicates an expected call of GetTokenHash.
func (mr *MockUserHandlerServiceMockRecorder) GetTokenHash(tokenRaw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenHash", reflect.TypeOf((*MockUserHandlerService)(nil).GetTokenHash), tokenRaw)
}

// IsTokenInBlackList mocks base method.
func (m *MockUserHandlerService) IsTokenInBlackList(tokenRaw string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenInBlackList", tokenRaw)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTokenInBlackList indicates an expected call of IsTokenInBlackList.
func (mr *MockUserHandlerServiceMockRecorder) IsTokenInBlackList(tokenRaw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenInBlackList", reflect.TypeOf((*MockUserHandlerService)(nil).IsTokenInBlackList), tokenRaw)
}

// Login mocks base method.
func (m *MockUserHandlerService) Login(ctx context.Context, userID, systemID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, userID, systemID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserHandlerServiceMockRecorder) Login(ctx, userID, systemID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserHandlerService)(nil).Login), ctx, userID, systemID, password)
}

// NewProcRequest mocks base method.
func (m *MockUserHandlerService) NewProcRequest(reqID, userID string) (*processing.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcRequest", reqID, userID)
	ret0, _ := ret[0].(*processing.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcRequest indicates an expected call of NewProcRequest.
func (mr *MockUserHandlerServiceMockRecorder) NewProcRequest(reqID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcRequest", reflect.TypeOf((*MockUserHandlerService)(nil).NewProcRequest), reqID, userID)
}

// Register mocks base method.
func (m *MockUserHandlerService) Register(ctx context.Context, procRequest *processing.Request, user *model.UserCreateRequest, systemID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, procRequest, user, systemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserHandlerServiceMockRecorder) Register(ctx, procRequest, user, systemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserHandlerService)(nil).Register), ctx, procRequest, user, systemID)
}

// VerifyAccess mocks base method.
func (m *MockUserHandlerService) VerifyAccess(userID, tokenString string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccess", userID, tokenString)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAccess indicates an expected call of VerifyAccess.
func (mr *MockUserHandlerServiceMockRecorder) VerifyAccess(userID, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccess", reflect.TypeOf((*MockUserHandlerService)(nil).VerifyAccess), userID, tokenString)
}

// VerifyAndGetTokenDetails mocks base method.
func (m *MockUserHandlerService) VerifyAndGetTokenDetails(userID, accessToken, refreshToken string) (*user.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndGetTokenDetails", userID, accessToken, refreshToken)
	ret0, _ := ret[0].(*user.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAndGetTokenDetails indicates an expected call of VerifyAndGetTokenDetails.
func (mr *MockUserHandlerServiceMockRecorder) VerifyAndGetTokenDetails(userID, accessToken, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndGetTokenDetails", reflect.TypeOf((*MockUserHandlerService)(nil).VerifyAndGetTokenDetails), userID, accessToken, refreshToken)
}

// VerifyToken mocks base method.
func (m *MockUserHandlerService) VerifyToken(userID, tokenString string, tokenType user.TokenType) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", userID, tokenString, tokenType)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockUserHandlerServiceMockRecorder) VerifyToken(userID, tokenString, tokenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockUserHandlerService)(nil).VerifyToken), userID, tokenString, tokenType)
}
