// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	access "github.com/bsn-si/IPEHR-gateway/src/pkg/access"
	chachaPoly "github.com/bsn-si/IPEHR-gateway/src/pkg/crypto/chachaPoly"
	processing "github.com/bsn-si/IPEHR-gateway/src/pkg/docs/service/processing"
	model "github.com/bsn-si/IPEHR-gateway/src/pkg/user/model"
	service "github.com/bsn-si/IPEHR-gateway/src/pkg/user/service"
	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddTokenInBlackList mocks base method.
func (m *MockUserService) AddTokenInBlackList(tokenRaw string, expires int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTokenInBlackList", tokenRaw, expires)
}

// AddTokenInBlackList indicates an expected call of AddTokenInBlackList.
func (mr *MockUserServiceMockRecorder) AddTokenInBlackList(tokenRaw, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTokenInBlackList", reflect.TypeOf((*MockUserService)(nil).AddTokenInBlackList), tokenRaw, expires)
}

// CreateToken mocks base method.
func (m *MockUserService) CreateToken(userID string) (*service.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID)
	ret0, _ := ret[0].(*service.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockUserServiceMockRecorder) CreateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockUserService)(nil).CreateToken), userID)
}

// ExtractToken mocks base method.
func (m *MockUserService) ExtractToken(bearToken string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", bearToken)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockUserServiceMockRecorder) ExtractToken(bearToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockUserService)(nil).ExtractToken), bearToken)
}

// ExtractTokenMetadata mocks base method.
func (m *MockUserService) ExtractTokenMetadata(token *jwt.Token) (*service.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTokenMetadata", token)
	ret0, _ := ret[0].(*service.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTokenMetadata indicates an expected call of ExtractTokenMetadata.
func (mr *MockUserServiceMockRecorder) ExtractTokenMetadata(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTokenMetadata", reflect.TypeOf((*MockUserService)(nil).ExtractTokenMetadata), token)
}

// GetTokenHash mocks base method.
func (m *MockUserService) GetTokenHash(tokenRaw string) [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenHash", tokenRaw)
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// GetTokenHash indicates an expected call of GetTokenHash.
func (mr *MockUserServiceMockRecorder) GetTokenHash(tokenRaw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenHash", reflect.TypeOf((*MockUserService)(nil).GetTokenHash), tokenRaw)
}

// GroupAddUser mocks base method.
func (m *MockUserService) GroupAddUser(ctx context.Context, userID, systemID, addUserID, addSystemID, reqID string, level access.Level, groupID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupAddUser", ctx, userID, systemID, addUserID, addSystemID, reqID, level, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupAddUser indicates an expected call of GroupAddUser.
func (mr *MockUserServiceMockRecorder) GroupAddUser(ctx, userID, systemID, addUserID, addSystemID, reqID, level, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupAddUser", reflect.TypeOf((*MockUserService)(nil).GroupAddUser), ctx, userID, systemID, addUserID, addSystemID, reqID, level, groupID)
}

// GroupCreate mocks base method.
func (m *MockUserService) GroupCreate(ctx context.Context, userID, name, description string) (string, *uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", ctx, userID, name, description)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockUserServiceMockRecorder) GroupCreate(ctx, userID, name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockUserService)(nil).GroupCreate), ctx, userID, name, description)
}

// GroupGetByID mocks base method.
func (m *MockUserService) GroupGetByID(ctx context.Context, userID, systemID string, groupID *uuid.UUID, groupKey *chachaPoly.Key) (*model.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupGetByID", ctx, userID, systemID, groupID, groupKey)
	ret0, _ := ret[0].(*model.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupGetByID indicates an expected call of GroupGetByID.
func (mr *MockUserServiceMockRecorder) GroupGetByID(ctx, userID, systemID, groupID, groupKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupGetByID", reflect.TypeOf((*MockUserService)(nil).GroupGetByID), ctx, userID, systemID, groupID, groupKey)
}

// GroupGetList mocks base method.
func (m *MockUserService) GroupGetList(ctx context.Context, userID, systemID string) ([]*model.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupGetList", ctx, userID, systemID)
	ret0, _ := ret[0].([]*model.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupGetList indicates an expected call of GroupGetList.
func (mr *MockUserServiceMockRecorder) GroupGetList(ctx, userID, systemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupGetList", reflect.TypeOf((*MockUserService)(nil).GroupGetList), ctx, userID, systemID)
}

// GroupRemoveUser mocks base method.
func (m *MockUserService) GroupRemoveUser(ctx context.Context, userID, systemID, removingUserID, removeSystemID, reqID string, groupID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRemoveUser", ctx, userID, systemID, removingUserID, removeSystemID, reqID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRemoveUser indicates an expected call of GroupRemoveUser.
func (mr *MockUserServiceMockRecorder) GroupRemoveUser(ctx, userID, systemID, removingUserID, removeSystemID, reqID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRemoveUser", reflect.TypeOf((*MockUserService)(nil).GroupRemoveUser), ctx, userID, systemID, removingUserID, removeSystemID, reqID, groupID)
}

// Info mocks base method.
func (m *MockUserService) Info(ctx context.Context, userID, systemID string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, userID, systemID)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockUserServiceMockRecorder) Info(ctx, userID, systemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockUserService)(nil).Info), ctx, userID, systemID)
}

// InfoByCode mocks base method.
func (m *MockUserService) InfoByCode(ctx context.Context, code int) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoByCode", ctx, code)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfoByCode indicates an expected call of InfoByCode.
func (mr *MockUserServiceMockRecorder) InfoByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoByCode", reflect.TypeOf((*MockUserService)(nil).InfoByCode), ctx, code)
}

// IsTokenInBlackList mocks base method.
func (m *MockUserService) IsTokenInBlackList(tokenRaw string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenInBlackList", tokenRaw)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTokenInBlackList indicates an expected call of IsTokenInBlackList.
func (mr *MockUserServiceMockRecorder) IsTokenInBlackList(tokenRaw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenInBlackList", reflect.TypeOf((*MockUserService)(nil).IsTokenInBlackList), tokenRaw)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, userID, systemID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, userID, systemID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, userID, systemID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, userID, systemID, password)
}

// NewProcRequest mocks base method.
func (m *MockUserService) NewProcRequest(reqID, userID string, kind processing.RequestKind) (processing.RequestInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcRequest", reqID, userID, kind)
	ret0, _ := ret[0].(processing.RequestInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcRequest indicates an expected call of NewProcRequest.
func (mr *MockUserServiceMockRecorder) NewProcRequest(reqID, userID, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcRequest", reflect.TypeOf((*MockUserService)(nil).NewProcRequest), reqID, userID, kind)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, user *model.UserCreateRequest, systemID, reqID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user, systemID, reqID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, user, systemID, reqID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, user, systemID, reqID)
}

// VerifyAccess mocks base method.
func (m *MockUserService) VerifyAccess(userID, tokenString string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccess", userID, tokenString)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAccess indicates an expected call of VerifyAccess.
func (mr *MockUserServiceMockRecorder) VerifyAccess(userID, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccess", reflect.TypeOf((*MockUserService)(nil).VerifyAccess), userID, tokenString)
}

// VerifyAndGetTokenDetails mocks base method.
func (m *MockUserService) VerifyAndGetTokenDetails(userID, accessToken, refreshToken string) (*service.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndGetTokenDetails", userID, accessToken, refreshToken)
	ret0, _ := ret[0].(*service.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAndGetTokenDetails indicates an expected call of VerifyAndGetTokenDetails.
func (mr *MockUserServiceMockRecorder) VerifyAndGetTokenDetails(userID, accessToken, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndGetTokenDetails", reflect.TypeOf((*MockUserService)(nil).VerifyAndGetTokenDetails), userID, accessToken, refreshToken)
}

// VerifyToken mocks base method.
func (m *MockUserService) VerifyToken(userID, tokenString string, tokenType service.TokenType) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", userID, tokenString, tokenType)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockUserServiceMockRecorder) VerifyToken(userID, tokenString, tokenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockUserService)(nil).VerifyToken), userID, tokenString, tokenType)
}
