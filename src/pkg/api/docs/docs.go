// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://bsn.si/blockchain",
            "email": "support@bsn.si"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/access/document": {
            "post": {
                "description": "Sets access to the document with the specified CID for the user with the userID.\nPossible access levels: ` + "`" + `owner` + "`" + `, ` + "`" + `admin` + "`" + `, ` + "`" + `read` + "`" + `, ` + "`" + `noAccess` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACCESS"
                ],
                "summary": "Set user access to the document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "DTO with data to create group access",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DocAccessSetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Indicates that the request to change the level of access to the document was successfully created"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "404": {
                        "description": "Is returned when the userID for which access is set is not found "
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/access/document/": {
            "get": {
                "description": "Returns the list of documents available to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACCESS"
                ],
                "summary": "Get a document access list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/definition/query/{qualifiedQueryName}": {
            "get": {
                "description": "Retrieves list of all stored queries on the system matched by qualified_query_name as pattern.\nhttps://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query/operation/definition_query_list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Get list stored queries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name}, and when is empty, it will be treated as ",
                        "name": "qualified_query_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.StoredQuery"
                            }
                        }
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query/operation/definition_query_store.yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Stores a new query, or updates an existing query on the system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name}, and when is empty, it will be treated as ",
                        "name": "qualified_query_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Parameter indicating the query language/type",
                        "name": "query_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the query was successfully stored."
                    },
                    "400": {
                        "description": "Is returned when the server was unable to store the query. This could be due to incorrect request body (could not be parsed, etc), unknown query type, etc."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr": {
            "get": {
                "description": "Retrieve the EHR with the specified subject_id and subject_namespace.\nThese subject parameters will be matched against EHRâ€™s\nEHR_STATUS.subject.external_ref.id.value and EHR_STATUS.subject.external_ref.namespace values.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Get EHR summary by subject id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "subject id. Example: ins01",
                        "name": "subject_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id namespace. Example: examples",
                        "name": "subject_namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when userID is empty"
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    }
                }
            },
            "post": {
                "description": "Create a new EHR with an auto-generated identifier.\nAn EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body. If not supplied, a default EHR_STATUS will be used by the service with following attributes:\n- ` + "`" + `is_queryable` + "`" + `: true\n- ` + "`" + `is_modifiable` + "`" + `: true\n- ` + "`" + `subject` + "`" + `: a PARTY_SELF object\n\nAll other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Create EHR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The new EHR resource is returned in the body when the requestâ€™s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EhrCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "ehr_id of created document. Example: 7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request body (if provided)  could      not  be  parsed."
                    },
                    "409": {
                        "description": "Unable to create a new EHR due to a conflict with an already existing EHR with the same subject id, namespace pair."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}": {
            "get": {
                "description": "Retrieve the EHR with the specified ehr_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Get EHR summary by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when userID is empty"
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "Create a new EHR with the specified ehr_id identifier.\nThe value of the ehr_id unique identifier MUST be valid HIER_OBJECT_ID value. It is strongly RECOMMENDED that an UUID always be used for this.\nAn EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body. If not supplied, a default EHR_STATUS will be used by the service with following attributes:\n- ` + "`" + `is_queryable` + "`" + `: true\n- ` + "`" + `is_modifiable` + "`" + `: true\n- ` + "`" + `subject` + "`" + `: a PARTY_SELF object\n\nAll other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Create EHR with id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The new EHR resource is returned in the body when the requestâ€™s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "An UUID as a user specified EHR identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EhrCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "ehr_id of created document. Example: 7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request body (if provided)  could      not  be  parsed."
                    },
                    "409": {
                        "description": "Unable to create a new EHR due to a conflict with an already existing EHR. Can happen when the supplied ehr_id is already used by an existing EHR."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition": {
            "post": {
                "description": "Work in progress...\nCreates the first version of a new COMPOSITION in the EHR identified by ehr_id.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Create COMPOSITION",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId - UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "GroupAccessId - UUID. If not specified, the default access group will be used.",
                        "name": "GroupAccessId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The new EHR resource is returned in the body when the requestâ€™s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "COMPOSITION",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Composition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Composition"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/composition/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid ehr_id or invalid content (e.g. content could not be converted to a valid COMPOSITION object)"
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    },
                    "422": {
                        "description": "Is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition/{preceding_version_uid}": {
            "delete": {
                "description": "Deletes the COMPOSITION identified by ` + "`" + `preceding_version_uid` + "`" + ` and associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Deletes the COMPOSITION by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Identifier of the COMPOSITION to be deleted. This MUST be the last (most recent)  version.  Example:  ` + "`" + `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1` + "`" + `",
                        "name": "preceding_version_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "` + "`" + `No Content` + "`" + ` is returned when COMPOSITION was deleted.",
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "` + "`" + `Bad Request` + "`" + ` is returned when the composition with ` + "`" + `preceding_version_uid` + "`" + ` is already deleted."
                    },
                    "404": {
                        "description": "` + "`" + `Not Found` + "`" + ` is returned when an EHR with ehr_id does not exist or when a COMPOSITION with preceding_version_uid does not exist."
                    },
                    "409": {
                        "description": "` + "`" + `Conflict` + "`" + ` is returned when supplied ` + "`" + `preceding_version_uid` + "`" + ` doesnâ€™t match the latest version. Returns latest version in the Location and ETag headers."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition/{version_uid}": {
            "get": {
                "description": "Retrieves a particular version of the COMPOSITION identified by ` + "`" + `version_uid` + "`" + ` and associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Get COMPOSITION by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "VERSION identifier taken from VERSION.uid.value. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1",
                        "name": "version_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Composition"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "204": {
                        "description": "Is returned when the COMPOSITION is deleted (logically)."
                    },
                    "400": {
                        "description": "Is returned when AuthUserId is not specified"
                    },
                    "404": {
                        "description": "is returned when an EHR with ` + "`" + `ehr_id` + "`" + ` does not exist or when an COMPOSITION with ` + "`" + `version_uid` + "`" + ` does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition/{versioned_object_uid}": {
            "put": {
                "description": "Updates COMPOSITION identified by ` + "`" + `versioned_object_uid` + "`" + ` and associated with the EHR\nidentified by ` + "`" + `ehr_id` + "`" + `. If the request body already contains a COMPOSITION.uid.value,\nit must match the ` + "`" + `versioned_object_uid` + "`" + ` in the URL. The existing latest ` + "`" + `version_uid` + "`" + `\nof COMPOSITION resource (i.e the ` + "`" + `preceding_version_uid` + "`" + `) must be specified in the ` + "`" + `If-Match` + "`" + ` header.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Updates the COMPOSITION by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "identifier of the COMPOSITION to be updated. Example: ` + "`" + `8849182c-82ad-4088-a07f-48ead4180515` + "`" + `",
                        "name": "versioned_object_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The updated COMPOSITION resource is returned to the body when the requestâ€™s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The existing latest version_uid of COMPOSITION resource (i.e the preceding_version_uid).  Example:  ` + "`" + `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1` + "`" + `",
                        "name": "If-Match",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "List of changes in COMPOSITION",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Composition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the COMPOSITION is successfully updated and the updated resource is returned in the body when Prefer header value is ` + "`" + `return=representation.` + "`" + `",
                        "schema": {
                            "$ref": "#/definitions/Composition"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/composition/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "` + "`" + `Bad Request` + "`" + ` is returned when the request has invalid ` + "`" + `ehr_id` + "`" + ` or invalid content (e.g. either the body of the request could not be read, or converted to a valid COMPOSITION object)"
                    },
                    "404": {
                        "description": "` + "`" + `Not Found` + "`" + ` is returned when an EHR with ehr_id does not exist or when a COMPOSITION with version_object_uid does not exist."
                    },
                    "412": {
                        "description": "` + "`" + `Version conflict` + "`" + ` is returned when ` + "`" + `If-Match` + "`" + ` request header doesnâ€™t match the latest version (of this versioned object)  on  the  service  side.  Returns  also  latest  ` + "`" + `version_uid` + "`" + `  in  the  ` + "`" + `Location` + "`" + `  and  ` + "`" + `ETag` + "`" + `  headers."
                    },
                    "422": {
                        "description": "` + "`" + `Unprocessable Entity` + "`" + ` is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/ehr_status": {
            "get": {
                "description": "Retrieves a version of the EHR_STATUS associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `. If ` + "`" + `version_at_time` + "`" + ` is supplied, retrieves the version extant at specified time, otherwise retrieves the latest EHR_STATUS version.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR_STATUS"
                ],
                "summary": "Get EHR_STATUS version by time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given time in the extended ISO 8601 format. Example: 2015-01-20T19:30:22.765+01:00",
                        "name": "version_at_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content such as an invalid ` + "`" + `version_at_time` + "`" + ` format."
                    },
                    "404": {
                        "description": "Is returned when EHR with ` + "`" + `ehr_id` + "`" + ` does not exist or a version of an EHR_STATUS resource does not exist at the specified ` + "`" + `version_at_time` + "`" + `"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "Updates EHR_STATUS associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR_STATUS"
                ],
                "summary": "Update EHR_STATUS",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The existing latest ` + "`" + `version_uid` + "`" + ` of EHR_STATUS resource (i.e. the ` + "`" + `preceding_version_uid` + "`" + `)  must  be  specified.",
                        "name": "If-Match",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Updated resource is returned in the body when the requestâ€™s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "EHR_STATUS",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "uid of created document. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "204": {
                        "description": "Is returned when ` + "`" + `Prefer` + "`" + ` header is missing or is set to ` + "`" + `return=minimal` + "`" + `",
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "uid of created document. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    },
                    "412": {
                        "description": "Is returned when ` + "`" + `If-Match` + "`" + ` request header doesnâ€™t match the latest version on the service side. Returns also latest ` + "`" + `version_uid` + "`" + ` in the ` + "`" + `Location` + "`" + ` and ` + "`" + `ETag` + "`" + ` headers."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/ehr_status/{version_uid}": {
            "get": {
                "description": "Retrieves a particular version of the EHR_STATUS identified by ` + "`" + `version_uid` + "`" + ` and associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR_STATUS"
                ],
                "summary": "Get EHR_STATUS by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "VERSION identifier taken from VERSION.uid.value. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2",
                        "name": "version_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when AuthUserId is not specified"
                    },
                    "404": {
                        "description": "is returned when an EHR with ` + "`" + `ehr_id` + "`" + ` does not exist or when an EHR_STATUS with ` + "`" + `version_uid` + "`" + ` does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/query/aql": {
            "post": {
                "description": "Work in progress...\nExecute ad-hoc query, supplied by q attribute, fetching fetch numbers of rows from offset and passing query_parameters to the underlying query engine.\nSee also details on usage of [query parameters](https://specifications.openehr.org/releases/ITS-REST/Release-1.0.2/query.html#requirements-common-headers-and-query-parameters).\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Execute ad-hoc (non-stored) AQL query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Is returned when the server was unable to execute the query due to invalid input, e.g. a request with missing ` + "`" + `q` + "`" + ` parameter or an invalid query syntax."
                    },
                    "408": {
                        "description": "Is returned when there is a query execution timeout (i.e. maximum query execution time reached, therefore the server aborted the execution of the query)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/requests/": {
            "get": {
                "description": "It is returning only transactions which in progress\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "REQUEST"
                ],
                "summary": "Get list of transactions requests by authorized user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default: 10",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id namespace. Example: examples",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/processing.RequestsResult"
                        }
                    },
                    "400": {
                        "description": "Is returned when userID is empty"
                    },
                    "404": {
                        "description": "Is returned when requests not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/requests/{request_id}": {
            "get": {
                "description": "It's returning only transactions which in progress\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "REQUEST"
                ],
                "summary": "Get list of transactions by certain request id for authorized user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId UUID",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique id of request",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/processing.RequestResult"
                        }
                    },
                    "400": {
                        "description": "Is returned when userID or request_id is empty"
                    },
                    "404": {
                        "description": "Is returned when requests not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User authentication request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserAuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JWT"
                        }
                    },
                    "400": {
                        "description": "Password, EhrSystemId or userID incorrect"
                    },
                    "401": {
                        "description": "Password or userID incorrect"
                    },
                    "404": {
                        "description": "User with ID not exist"
                    },
                    "422": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "JWT",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.JWT"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    },
                    "401": {
                        "description": "User unauthorized"
                    },
                    "422": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/refresh/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Refresh JWT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer RefreshToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JWT"
                        }
                    },
                    "401": {
                        "description": "User unauthorized"
                    },
                    "404": {
                        "description": "User with ID not exist"
                    },
                    "422": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User creation request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the request has succeeded and transaction about register new user has been created",
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "409": {
                        "description": "User with that userID already exist"
                    },
                    "422": {
                        "description": "Password, systemID or role incorrect"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        }
    },
    "definitions": {
        "Composition": {
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                },
                "archetype_details": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "archetype_id": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        },
                        "rm_version": {
                            "type": "string"
                        },
                        "template_id": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "category": {
                    "type": "object",
                    "properties": {
                        "defining_code": {
                            "type": "object",
                            "properties": {
                                "code_string": {
                                    "type": "string"
                                },
                                "preferred_term": {
                                    "type": "string"
                                },
                                "terminology_id": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "composer": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "external_ref": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "object",
                                    "properties": {
                                        "_type": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "namespace": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                }
                            }
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                },
                "content": {
                    "type": "array",
                    "items": {}
                },
                "context": {
                    "type": "object",
                    "properties": {
                        "setting": {
                            "type": "object",
                            "properties": {
                                "defining_code": {
                                    "type": "object",
                                    "properties": {
                                        "code_string": {
                                            "type": "string"
                                        },
                                        "preferred_term": {
                                            "type": "string"
                                        },
                                        "terminology_id": {
                                            "type": "object",
                                            "properties": {
                                                "value": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "value": {
                                    "type": "string"
                                }
                            }
                        },
                        "start_time": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "language": {
                    "type": "object",
                    "properties": {
                        "code_string": {
                            "type": "string"
                        },
                        "preferred_term": {
                            "type": "string"
                        },
                        "terminology_id": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "name": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "territory": {
                    "type": "object",
                    "properties": {
                        "code_string": {
                            "type": "string"
                        },
                        "preferred_term": {
                            "type": "string"
                        },
                        "terminology_id": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "uid": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.DocAccessSetRequest": {
            "type": "object",
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "cid": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "model.EhrCreateRequest": {
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "isModifiable": {
                    "type": "boolean"
                },
                "isQueryable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "subject": {
                    "type": "object",
                    "properties": {
                        "external_ref": {
                            "$ref": "#/definitions/model.ExternalRef"
                        }
                    }
                }
            }
        },
        "model.EhrStatusUpdate": {
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "is_modifiable": {
                    "type": "boolean"
                },
                "is_queryable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "other_details": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "archetype_node_id": {
                            "type": "string"
                        },
                        "items": {
                            "type": "array",
                            "items": {}
                        },
                        "name": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "subject": {
                    "type": "object",
                    "properties": {
                        "external_ref": {
                            "$ref": "#/definitions/model.ExternalRef"
                        }
                    }
                },
                "uid": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.EhrSummary": {
            "type": "object",
            "properties": {
                "ehr_access": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "ehr_id": {
                    "type": "string"
                },
                "ehr_status": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "system_id": {
                    "type": "string"
                },
                "time_created": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.ExternalRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "scheme": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.JWT": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "model.QueryRequest": {
            "type": "object",
            "properties": {
                "fetch": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "q": {
                    "type": "string"
                },
                "query_parameters": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "model.QueryResponse": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "path": {
                                "type": "string"
                            }
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "properties": {
                        "_created": {
                            "type": "string"
                        },
                        "_executed_aql": {
                            "type": "string"
                        },
                        "_generator": {
                            "type": "string"
                        },
                        "_href": {
                            "type": "string"
                        },
                        "_schema_version": {
                            "type": "string"
                        },
                        "_type": {
                            "type": "string"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "q": {
                    "type": "string"
                },
                "rows": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "model.StoredQuery": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "q": {
                    "type": "string"
                },
                "saved": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.UserAuthRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "processing.EthereumTx": {
            "type": "object",
            "properties": {
                "Kind": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                }
            }
        },
        "processing.FileCoinTx": {
            "type": "object",
            "properties": {
                "Kind": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "cid": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "dealCID": {
                    "type": "string"
                },
                "dealID": {
                    "type": "integer"
                },
                "minerAddress": {
                    "type": "string"
                }
            }
        },
        "processing.RequestResult": {
            "type": "object",
            "properties": {
                "ethereum": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/processing.EthereumTx"
                    }
                },
                "filecoin": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/processing.FileCoinTx"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "processing.RequestsResult": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/processing.RequestResult"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "gateway.ipehr.org",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "IPEHR Gateway API",
	Description:      "The IPEHR Gateway is an openEHR compliant EHR server implementation that stores encrypted medical data in a Filecoin distributed file storage.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
