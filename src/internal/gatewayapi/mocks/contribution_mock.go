// Code generated by MockGen. DO NOT EDIT.
// Source: contribution.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/bsn-si/IPEHR-gateway/src/pkg/docs/model"
	processing "github.com/bsn-si/IPEHR-gateway/src/pkg/docs/service/processing"
	helper "github.com/bsn-si/IPEHR-gateway/src/pkg/helper"
	model0 "github.com/bsn-si/IPEHR-gateway/src/pkg/user/model"
	gomock "github.com/golang/mock/gomock"
)

// MockContributionService is a mock of ContributionService interface.
type MockContributionService struct {
	ctrl     *gomock.Controller
	recorder *MockContributionServiceMockRecorder
}

// MockContributionServiceMockRecorder is the mock recorder for MockContributionService.
type MockContributionServiceMockRecorder struct {
	mock *MockContributionService
}

// NewMockContributionService creates a new mock instance.
func NewMockContributionService(ctrl *gomock.Controller) *MockContributionService {
	mock := &MockContributionService{ctrl: ctrl}
	mock.recorder = &MockContributionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContributionService) EXPECT() *MockContributionServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockContributionService) Execute(ctx context.Context, req processing.RequestInterface, userID, ehrUUID string, c *model.Contribution, hComposition helper.Searcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, req, userID, ehrUUID, c, hComposition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockContributionServiceMockRecorder) Execute(ctx, req, userID, ehrUUID, c, hComposition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockContributionService)(nil).Execute), ctx, req, userID, ehrUUID, c, hComposition)
}

// GetByID mocks base method.
func (m *MockContributionService) GetByID(ctx context.Context, userID, cID string) (*model.ContributionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID, cID)
	ret0, _ := ret[0].(*model.ContributionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContributionServiceMockRecorder) GetByID(ctx, userID, cID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContributionService)(nil).GetByID), ctx, userID, cID)
}

// NewProcRequest mocks base method.
func (m *MockContributionService) NewProcRequest(reqID, userID, ehrUUID string, kind processing.RequestKind) (processing.RequestInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcRequest", reqID, userID, ehrUUID, kind)
	ret0, _ := ret[0].(processing.RequestInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcRequest indicates an expected call of NewProcRequest.
func (mr *MockContributionServiceMockRecorder) NewProcRequest(reqID, userID, ehrUUID, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcRequest", reflect.TypeOf((*MockContributionService)(nil).NewProcRequest), reqID, userID, ehrUUID, kind)
}

// PrepareResponse mocks base method.
func (m *MockContributionService) PrepareResponse(ctx context.Context, systemID string, c *model.Contribution) (*model.ContributionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareResponse", ctx, systemID, c)
	ret0, _ := ret[0].(*model.ContributionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareResponse indicates an expected call of PrepareResponse.
func (mr *MockContributionServiceMockRecorder) PrepareResponse(ctx, systemID, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareResponse", reflect.TypeOf((*MockContributionService)(nil).PrepareResponse), ctx, systemID, c)
}

// Store mocks base method.
func (m *MockContributionService) Store(ctx context.Context, req processing.RequestInterface, systemID string, user *model0.UserInfo, c *model.Contribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, req, systemID, user, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockContributionServiceMockRecorder) Store(ctx, req, systemID, user, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockContributionService)(nil).Store), ctx, req, systemID, user, c)
}

// Validate mocks base method.
func (m *MockContributionService) Validate(ctx context.Context, c *model.Contribution, template helper.Searcher) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, c, template)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockContributionServiceMockRecorder) Validate(ctx, c, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockContributionService)(nil).Validate), ctx, c, template)
}
