// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://bsn.si/blockchain",
            "email": "support@bsn.si"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/access/document": {
            "post": {
                "description": "Sets access to the document with the specified CID for the user with the userID.\nPossible access levels: ` + "`" + `owner` + "`" + `, ` + "`" + `admin` + "`" + `, ` + "`" + `read` + "`" + `, ` + "`" + `noAccess` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACCESS"
                ],
                "summary": "Set user access to the document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "description": "DTO with data to create group access",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DocAccessSetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Indicates that the request to change the level of access to the document was successfully created"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "404": {
                        "description": "Is returned when the userID for which access is set is not found "
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/access/document/": {
            "get": {
                "description": "Returns the list of documents available to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ACCESS"
                ],
                "summary": "Get a document access list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DocAccessListResponse"
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/definition/query/{qualified_query_name}": {
            "get": {
                "description": "Retrieves list of all stored queries on the system matched by qualified_query_name as pattern.\nhttps://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query/operation/definition_query_list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Get list stored queries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name},  and  when  is  empty,  it  will  be  treated  as  ",
                        "name": "qualified_query_name",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.StoredQuery"
                            }
                        }
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query/operation/definition_query_store.yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Stores a new query, or updates an existing query on the system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name}, and when is empty, it will be treated as ",
                        "name": "qualified_query_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Parameter indicating the query language/type",
                        "name": "query_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the query was successfully stored."
                    },
                    "400": {
                        "description": "Is returned when the server was unable to store the query. This could be due to incorrect request body (could not be parsed, etc), unknown query type, etc."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/definition/query/{qualified_query_name}/{version}": {
            "get": {
                "description": "Retrieves the definition of a particular stored query (at specified version) and its associated metadata.\nhttps://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query/operation/definition_query_list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Get stored query by version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name},  and  when  is       empty,  it       will     be  treated  as    ",
                        "name": "qualified_query_name",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "A SEMVER version number. This can be a an exact version (e.g. 1.7.1),     or   a     pattern  as      partial  prefix,  in  a        form  of          {major}  or   {major}.{minor}  (e.g. 1 or 1.0),  in  which  case  the  highest  (latest)  version  matching  the  prefix  will  be  considered.",
                        "name": "version",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.StoredQuery"
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "404": {
                        "description": "Is returned when a stored query with {qualified_query_name}  and  {version}  does  not  exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query/operation/definition_query_store.yaml",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Stores a query, at a specified version, on the system.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name},  and  when  is       empty,  it       will     be  treated  as    ",
                        "name": "qualified_query_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A SEMVER version number. This can be a an exact version (e.g. 1.7.1),     or   a     pattern  as      partial  prefix,  in  a        form  of          {major}  or   {major}.{minor}  (e.g. 1 or 1.0),  in  which  case  the  highest  (latest)  version  matching  the  prefix  will  be  considered",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Parameter indicating the query language/type",
                        "name": "query_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the query was successfully stored"
                    },
                    "400": {
                        "description": "Is returned when the server was unable to store the query. This could be due to incorrect request body (could not be parsed, etc),  unknown  query  type,  etc"
                    },
                    "409": {
                        "description": "Is returned when a query with the given 'qualified_query_name' and 'version' already exists on the server"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/definition/template/adl1.4": {
            "get": {
                "description": "List the available ADL 1.4 operational templates (OPT) on the system.\nhttps://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/ADL1.4/operation/definition_template_adl1.4_list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Get a list of templates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned because of invalid content."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "post": {
                "description": "Upload a new ADL 1.4 operational template (OPT).\nhttps://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/ADL1.4/operation/definition_template_adl1.4_upload",
                "consumes": [
                    "application/xml"
                ],
                "produces": [
                    "text/plain",
                    "application/xml"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Store a template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"return=minimal\"",
                        "description": "Request header to indicate the preference over response details. The response will contain the entire resource when the Prefer header has a value of return=representation.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Is returned when the query was successfully uploaded.",
                        "schema": {
                            "$ref": "#/definitions/model.Template"
                        }
                    },
                    "400": {
                        "description": "Is returned when unable to upload a template, because of invalid content."
                    },
                    "409": {
                        "description": "Is returned when a template with same {template_id} (at given version, if supplied) already exists."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/definition/template/adl1.4/{template_id}": {
            "get": {
                "description": "Retrieves the ADL 1.4 operational template (OPT) identified by {template_id} identifier.\nhttps://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/ADL1.4/operation/definition_template_adl1.4_list",
                "produces": [
                    "application/xml",
                    "application/openehr.wt+json"
                ],
                "tags": [
                    "DEFINITION"
                ],
                "summary": "Get a template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Template identifier. Example: Vital Signs",
                        "name": "template_id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "404": {
                        "description": "Is returned when a stored query with {qualified_query_name} and {version} does not exist."
                    },
                    "406": {
                        "description": "Is returned when template with certain ID created with other accept header"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr": {
            "get": {
                "description": "Retrieve the EHR with the specified subject_id and subject_namespace.\nThese subject parameters will be matched against EHR’s\nEHR_STATUS.subject.external_ref.id.value and EHR_STATUS.subject.external_ref.namespace values.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Get EHR summary by subject id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "subject id. Example: ins01",
                        "name": "subject_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id namespace. Example: examples",
                        "name": "subject_namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when userID is empty"
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    }
                }
            },
            "post": {
                "description": "Create a new EHR with an auto-generated identifier.\nAn EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body. If not supplied, a default EHR_STATUS will be used by the service with following attributes:\n- ` + "`" + `is_queryable` + "`" + `: true\n- ` + "`" + `is_modifiable` + "`" + `: true\n- ` + "`" + `subject` + "`" + `: a PARTY_SELF object\n\nAll other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Create EHR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "GroupAccessId - UUID. If not specified, the default access group will be used.",
                        "name": "GroupAccessId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The new EHR resource is returned in the body when the request’s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EhrCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "ehr_id of created document. Example: 7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request body (if provided)  could      not  be  parsed."
                    },
                    "409": {
                        "description": "Unable to create a new EHR due to a conflict with an already existing EHR with the same subject id, namespace pair."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}": {
            "get": {
                "description": "Retrieve the EHR with the specified ehr_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Get EHR summary by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when userID is empty"
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "Create a new EHR with the specified ehr_id identifier.\nThe value of the ehr_id unique identifier MUST be valid HIER_OBJECT_ID value. It is strongly RECOMMENDED that an UUID always be used for this.\nAn EHR_STATUS resource needs to be always created and committed in the new EHR. This resource MAY be also supplied by the client as the request body. If not supplied, a default EHR_STATUS will be used by the service with following attributes:\n- ` + "`" + `is_queryable` + "`" + `: true\n- ` + "`" + `is_modifiable` + "`" + `: true\n- ` + "`" + `subject` + "`" + `: a PARTY_SELF object\n\nAll other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR"
                ],
                "summary": "Create EHR with id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The new EHR resource is returned in the body when the request’s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "An UUID as a user specified EHR identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EhrCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.EhrSummary"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "ehr_id of created document. Example: 7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request body (if provided)  could      not  be  parsed."
                    },
                    "409": {
                        "description": "Unable to create a new EHR due to a conflict with an already existing EHR. Can happen when the supplied ehr_id is already used by an existing EHR."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition": {
            "get": {
                "description": "Retrieves all versions of all COMPOSITIONs associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Get all COMPOSITIONs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.EhrDocumentItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when AuthUserId or EhrSystemId is not specified"
                    },
                    "404": {
                        "description": "is returned when an EHR with ` + "`" + `ehr_id` + "`" + ` does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "post": {
                "description": "Work in progress...\nCreates the first version of a new COMPOSITION in the EHR identified by ehr_id.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Create COMPOSITION",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "GroupAccessId - UUID. If not specified, the default access group will be used.",
                        "name": "GroupAccessId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The new EHR resource is returned in the body when the request’s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "COMPOSITION",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Composition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Composition"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/composition/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid ehr_id or invalid content (e.g. content could not be converted to a valid COMPOSITION object)"
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    },
                    "422": {
                        "description": "Is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition/{preceding_version_uid}": {
            "delete": {
                "description": "Deletes the COMPOSITION identified by ` + "`" + `preceding_version_uid` + "`" + ` and associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Deletes the COMPOSITION by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Identifier of the COMPOSITION to be deleted. This MUST be the last (most recent)  version.  Example:  ` + "`" + `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1` + "`" + `",
                        "name": "preceding_version_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "` + "`" + `No Content` + "`" + ` is returned when COMPOSITION was deleted.",
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "` + "`" + `Bad Request` + "`" + ` is returned when the composition with ` + "`" + `preceding_version_uid` + "`" + ` is already deleted."
                    },
                    "404": {
                        "description": "` + "`" + `Not Found` + "`" + ` is returned when an EHR with ehr_id does not exist or when a COMPOSITION with preceding_version_uid does not exist."
                    },
                    "409": {
                        "description": "` + "`" + `Conflict` + "`" + ` is returned when supplied ` + "`" + `preceding_version_uid` + "`" + ` doesn’t match the latest version. Returns latest version in the Location and ETag headers."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition/{version_uid}": {
            "get": {
                "description": "Retrieves a particular version of the COMPOSITION identified by ` + "`" + `version_uid` + "`" + ` and associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Get COMPOSITION by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "VERSION identifier taken from VERSION.uid.value. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1",
                        "name": "version_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Composition"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "204": {
                        "description": "Is returned when the COMPOSITION is deleted (logically)."
                    },
                    "400": {
                        "description": "Is returned when AuthUserId is not specified"
                    },
                    "404": {
                        "description": "is returned when an EHR with ` + "`" + `ehr_id` + "`" + ` does not exist or when an COMPOSITION with ` + "`" + `version_uid` + "`" + ` does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/composition/{versioned_object_uid}": {
            "put": {
                "description": "Updates COMPOSITION identified by ` + "`" + `versioned_object_uid` + "`" + ` and associated with the EHR\nidentified by ` + "`" + `ehr_id` + "`" + `. If the request body already contains a COMPOSITION.uid.value,\nit must match the ` + "`" + `versioned_object_uid` + "`" + ` in the URL. The existing latest ` + "`" + `version_uid` + "`" + `\nof COMPOSITION resource (i.e the ` + "`" + `preceding_version_uid` + "`" + `) must be specified in the ` + "`" + `If-Match` + "`" + ` header.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "COMPOSITION"
                ],
                "summary": "Updates the COMPOSITION by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "identifier of the COMPOSITION to be updated. Example: ` + "`" + `8849182c-82ad-4088-a07f-48ead4180515` + "`" + `",
                        "name": "versioned_object_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The updated COMPOSITION resource is returned to the body when the request’s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The existing latest version_uid of COMPOSITION resource (i.e the preceding_version_uid).  Example:  ` + "`" + `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1` + "`" + `",
                        "name": "If-Match",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "List of changes in COMPOSITION",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Composition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the COMPOSITION is successfully updated and the updated resource is returned in the body when Prefer header value is ` + "`" + `return=representation.` + "`" + `",
                        "schema": {
                            "$ref": "#/definitions/model.Composition"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/composition/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "` + "`" + `Bad Request` + "`" + ` is returned when the request has invalid ` + "`" + `ehr_id` + "`" + ` or invalid content (e.g. either the body of the request could not be read, or converted to a valid COMPOSITION object)"
                    },
                    "404": {
                        "description": "` + "`" + `Not Found` + "`" + ` is returned when an EHR with ehr_id does not exist or when a COMPOSITION with version_object_uid does not exist."
                    },
                    "412": {
                        "description": "` + "`" + `Version conflict` + "`" + ` is returned when ` + "`" + `If-Match` + "`" + ` request header doesn’t match the latest version (of this versioned object)  on  the  service  side.  Returns  also  latest  ` + "`" + `version_uid` + "`" + `  in  the  ` + "`" + `Location` + "`" + `  and  ` + "`" + `ETag` + "`" + `  headers."
                    },
                    "422": {
                        "description": "` + "`" + `Unprocessable Entity` + "`" + ` is returned when the content could be converted to a COMPOSITION, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied COMPOSITION)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/directory": {
            "get": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/ehr.html#tag/DIRECTORY/operation/directory_get_at_time\nRetrieves the version of the directory FOLDER associated with the EHR identified by {ehr_id}. If {version_at_time} is supplied, retrieves the version extant at specified time, otherwise retrieves the latest directory FOLDER version. If path is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DIRECTORY"
                ],
                "summary": "Get folder in DIRECTORY version at time.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"return=minimal\"",
                        "description": "Request header to indicate the preference over response details. The response will contain the entire resource when the Prefer header has a value of return=representation.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Example: version_at_time=2015-01-20T19:30:22.765+01:00 A given time in the extended ISO 8601 format",
                        "name": "version_at_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Example: path=episodes/a/b/c A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Patient UserId",
                        "name": "patient_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the FOLDER is successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/model.Directory"
                        }
                    },
                    "204": {
                        "description": "Is returned when the resource identified by the request parameters (at specified {version_at_time}) time has been deleted"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content"
                    },
                    "404": {
                        "description": "Is returned when an EHR with {ehr_id} does not exist, or when a directory does not exist at the specified {version_at_time}, or when {path} does not exists within the directory"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/ehr.html#tag/DIRECTORY/operation/directory_update",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DIRECTORY"
                ],
                "summary": "Update DIRECTORY",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"return=minimal\"",
                        "description": "Request header to indicate the preference over response details. The response will contain the entire resource when the Prefer header has a value of return=representation.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Patient UserId",
                        "name": "patient_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the DIRECTORY was successfully updated",
                        "schema": {
                            "$ref": "#/definitions/model.Directory"
                        }
                    },
                    "204": {
                        "description": "Is returned when directory was updated and 'Prefer' header is missing or is set to 'return=minimal'"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content"
                    },
                    "404": {
                        "description": "Is returned when an EHR with {ehr_id} does not exist, or DIRECTORY with that version is not exist"
                    },
                    "409": {
                        "description": "Is returned when a resource with same identifier(s) already exists, or previous request still in progress"
                    },
                    "412": {
                        "description": "Is returned when 'If-Match' request header doesn't match the latest version on the service side. Returns also latest 'version_uid' in the 'Location' and 'ETag' headers"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "post": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/ehr.html#tag/DIRECTORY/operation/directory_create",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DIRECTORY"
                ],
                "summary": "Create DIRECTORY",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Doctor UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"return=minimal\"",
                        "description": "Request header to indicate the preference over response details. The response will contain the entire resource when the Prefer header has a value of return=representation.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Patient UserId",
                        "name": "patient_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Is returned when the DIRECTORY was successfully created.",
                        "schema": {
                            "$ref": "#/definitions/model.Directory"
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content"
                    },
                    "404": {
                        "description": "Is returned when an EHR with {ehr_id}  does not exist"
                    },
                    "409": {
                        "description": "Is returned when a resource with same identifier(s) already exists, or previous request still in progress"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "delete": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/ehr.html#tag/DIRECTORY/operation/directory_delete\nThe existing latest {version_uid} of directory FOLDER resource (i.e. the {preceding_version_uid}) must be specified in the {If-Match} header.",
                "tags": [
                    "DIRECTORY"
                ],
                "summary": "Delete DIRECTORY folder associated with the EHR identified by ehr_id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"return=minimal\"",
                        "description": "Request header to indicate the preference over response details. The response will contain the entire resource when the Prefer header has a value of return=representation.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Patient UserId",
                        "name": "patient_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Is returned when the resource identified by the request parameters has been (logically) deleted"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content"
                    },
                    "404": {
                        "description": "Is returned when an EHR with {ehr_id} does not exist, or DIRECTORY with that version is not exist"
                    },
                    "409": {
                        "description": "Is returned when a resource with same identifier(s) already exists, or previous request still in progress"
                    },
                    "412": {
                        "description": "Is returned when 'If-Match' request header doesn't match the latest version on the service side. Returns also latest 'version_uid' in the 'Location' and 'ETag' headers"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/directory/{version_uid}": {
            "get": {
                "description": "https://specifications.openehr.org/releases/ITS-REST/latest/ehr.html#tag/DIRECTORY/operation/directory_get_at_time\nRetrieves a particular version of the directory FOLDER identified by {version_uid} and associated with the EHR identified by {ehr_id}. If {path} is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DIRECTORY"
                ],
                "summary": "Get folder in DIRECTORY by version.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"return=minimal\"",
                        "description": "Request header to indicate the preference over response details. The response will contain the entire resource when the Prefer header has a value of return=representation.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Example: 6cb19121-4307-4648-9da0-d62e4d51f19b::openEHRSys.example.com::2 VERSION identifier taken from VERSION.uid.value",
                        "name": "version_uid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Example: path=episodes/a/b/c A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Patient UserId",
                        "name": "patient_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Is returned when the FOLDER is successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/model.Directory"
                        }
                    },
                    "204": {
                        "description": "Is returned when the resource identified by the request parameters (at specified {version_at_time}) time has been deleted"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content"
                    },
                    "404": {
                        "description": "Is returned when an EHR with {ehr_id} does not exist, or when a directory does not exist at the specified {version_at_time}, or when {path} does not exists within the directory"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/ehr_status": {
            "get": {
                "description": "Retrieves a version of the EHR_STATUS associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `. If ` + "`" + `version_at_time` + "`" + ` is supplied, retrieves the version extant at specified time, otherwise retrieves the latest EHR_STATUS version.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR_STATUS"
                ],
                "summary": "Get EHR_STATUS version by time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given time in the extended ISO 8601 format. Example: 2015-01-20T19:30:22.765+01:00",
                        "name": "version_at_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content such as an invalid ` + "`" + `version_at_time` + "`" + ` format."
                    },
                    "404": {
                        "description": "Is returned when EHR with ` + "`" + `ehr_id` + "`" + ` does not exist or a version of an EHR_STATUS resource does not exist at the specified ` + "`" + `version_at_time` + "`" + `"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "put": {
                "description": "Updates EHR_STATUS associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR_STATUS"
                ],
                "summary": "Update EHR_STATUS",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The existing latest ` + "`" + `version_uid` + "`" + ` of EHR_STATUS resource (i.e. the ` + "`" + `preceding_version_uid` + "`" + `)  must  be  specified.",
                        "name": "If-Match",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Updated resource is returned in the body when the request’s ` + "`" + `Prefer` + "`" + ` header value is ` + "`" + `return=representation` + "`" + `, otherwise only headers are returned.",
                        "name": "Prefer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "EHR_STATUS",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "uid of created document. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "204": {
                        "description": "Is returned when ` + "`" + `Prefer` + "`" + ` header is missing or is set to ` + "`" + `return=minimal` + "`" + `",
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "uid of created document. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            },
                            "Location": {
                                "type": "string",
                                "description": "{baseUrl}/ehr/7d44b88c-4199-4bad-97dc-d78268e01398/ehr_status/8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the request has invalid content."
                    },
                    "404": {
                        "description": "Is returned when an EHR with ehr_id does not exist."
                    },
                    "412": {
                        "description": "Is returned when ` + "`" + `If-Match` + "`" + ` request header doesn’t match the latest version on the service side. Returns also latest ` + "`" + `version_uid` + "`" + ` in the ` + "`" + `Location` + "`" + ` and ` + "`" + `ETag` + "`" + ` headers."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/ehr/{ehr_id}/ehr_status/{version_uid}": {
            "get": {
                "description": "Retrieves a particular version of the EHR_STATUS identified by ` + "`" + `version_uid` + "`" + ` and associated with the EHR identified by ` + "`" + `ehr_id` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EHR_STATUS"
                ],
                "summary": "Get EHR_STATUS by version id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "EHR identifier taken from EHR.ehr_id.value. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "ehr_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "VERSION identifier taken from VERSION.uid.value. Example: 8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::2",
                        "name": "version_uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EhrStatusUpdate"
                        }
                    },
                    "202": {
                        "description": "Is returned when the request is still being processed"
                    },
                    "400": {
                        "description": "Is returned when AuthUserId is not specified"
                    },
                    "404": {
                        "description": "is returned when an EHR with ` + "`" + `ehr_id` + "`" + ` does not exist or when an EHR_STATUS with ` + "`" + `version_uid` + "`" + ` does not exist."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/query/aql": {
            "get": {
                "description": "Execute a given ad-hoc AQL query, supplied by {q} parameter, fetching {fetch} numbers of rows from {offset} and passing {query_parameters} to the underlying query engine.\nSee also details on usage of [query parameters](https://specifications.openehr.org/releases/ITS-REST/Release-1.0.2/query.html#requirements-common-headers-and-query-parameters).\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Execute ad-hoc AQL query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QueryRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "An optional parameter to execute the query within an EHR context.",
                        "name": "ehr_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "AQL. Example: {q=SELECT e/ehr_id/value, c/context/start_time/value as startTime, obs/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/magnitude AS systolic, c/uid/value AS cid, c/name FROM EHR e CONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1] CONTAINS OBSERVATION obs[openEHR-EHR-OBSERVATION.blood_pressure.v1] WHERE obs/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/magnitude \u003e= $systolic_bp} The AQL query to be executed.",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The row number in result-set to start result-set from (0-based), default is 0.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of rows to fetch (the default depends on the implementation).",
                        "name": "fetch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Is returned when the server was unable to execute the query due to invalid input, e.g. a request with missing ` + "`" + `q` + "`" + ` parameter or an invalid query syntax."
                    },
                    "408": {
                        "description": "Is returned when there is a query execution timeout (i.e. maximum query execution time reached, therefore the server aborted the execution of the query)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "post": {
                "description": "Execute ad-hoc query, supplied by q attribute, fetching {fetch} numbers of rows from {offset} and passing {query_parameters} to the underlying query engine.\nSee also details on usage of [query parameters](https://specifications.openehr.org/releases/ITS-REST/Release-1.0.2/query.html#requirements-common-headers-and-query-parameters).\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Execute ad-hoc (non-stored) AQL query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Is returned when the server was unable to execute the query due to invalid input, e.g. a request with missing ` + "`" + `q` + "`" + ` parameter or an invalid query syntax."
                    },
                    "408": {
                        "description": "Is returned when there is a query execution timeout (i.e. maximum query execution time reached, therefore the server aborted the execution of the query)."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/query/{qualified_query_name}": {
            "get": {
                "description": "Execute a stored query, identified by the supplied qualified_query_name (at latest version), fetching fetch numbers of rows from offset and passing query_parameters to the underlying query engine.\nSee also details on usage of [query parameters](https://specifications.openehr.org/releases/ITS-REST/latest/query.html#tag/Request/Common-Headers-and-Query-Parameters).\nQueries can be stored or, once stored, their definition can be retrieved using the [definition endpoint](https://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query).\nhttps://specifications.openehr.org/releases/ITS-REST/latest/query.html#tag/Query/operation/query_execute_stored_query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Execute stored AQL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name},  and  when  is       empty,  it       will     be  treated  as    ",
                        "name": "qualified_query_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "An optional parameter to execute the query within an EHR context.",
                        "name": "ehr_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The row number in result-set to start result-set from (0-based), default is 0.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of rows to fetch (the default depends on the implementation).",
                        "name": "fetch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QueryResponse"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "A unique identifier of the resultSet. Example: cdbb5db1-e466-4429-a9e5-bf80a54e120b"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the server was unable to execute the query due to invalid input, e.g. a required parameter is missing, or at least one of the parameters has invalid syntax"
                    },
                    "404": {
                        "description": "Is returned when a stored query with qualified_query_name does not exists."
                    },
                    "408": {
                        "description": "Is returned when there is a query execution timeout"
                    }
                }
            },
            "post": {
                "description": "Execute a stored query, identified by the supplied {qualified_query_name} (at latest version).\nSee also details on usage of [query parameters](https://specifications.openehr.org/releases/ITS-REST/latest/query.html#tag/Request/Common-Headers-and-Query-Parameters).\nQueries can be stored or, once stored, their definition can be retrieved using the [definition endpoint](https://specifications.openehr.org/releases/ITS-REST/latest/definition.html#tag/Query).\nhttps://specifications.openehr.org/releases/ITS-REST/latest/query.html#tag/Query/operation/query_execute_stored_query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QUERY"
                ],
                "summary": "Execute stored AQL (POST)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "If pattern should given be in the format of [{namespace}::]{query-name},  and  when  is       empty,  it       will     be  treated  as    ",
                        "name": "qualified_query_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query Request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QueryResponse"
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "A unique identifier of the resultSet. Example: cdbb5db1-e466-4429-a9e5-bf80a54e120b"
                            }
                        }
                    },
                    "400": {
                        "description": "Is returned when the server was unable to execute the query due to invalid input, e.g. a required parameter is missing, or at least one of the parameters has invalid syntax"
                    },
                    "404": {
                        "description": "Is returned when a stored query with qualified_query_name does not exists."
                    },
                    "408": {
                        "description": "Is returned when there is a query execution timeout"
                    }
                }
            }
        },
        "/requests/": {
            "get": {
                "description": "It is returning only transactions which in progress\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "REQUEST"
                ],
                "summary": "Get list of transactions requests by authorized user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default: 10",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id namespace. Example: examples",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/processing.RequestsResult"
                        }
                    },
                    "400": {
                        "description": "Is returned when userID is empty"
                    },
                    "404": {
                        "description": "Is returned when requests not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/requests/{request_id}": {
            "get": {
                "description": "It's returning only transactions which in progress\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "REQUEST"
                ],
                "summary": "Get list of transactions by certain request id for authorized user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique id of request",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/processing.RequestResult"
                        }
                    },
                    "400": {
                        "description": "Is returned when userID or request_id is empty"
                    },
                    "404": {
                        "description": "Is returned when requests not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/code/{code}": {
            "get": {
                "description": "Get information about the doctor by code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Get doctor info by code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The pin code of the requested doctor",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserInfo"
                        }
                    },
                    "400": {
                        "description": "` + "`" + `code` + "`" + ` is incorrect or requested user is not a doctor"
                    },
                    "404": {
                        "description": "User code is not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/group": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER_GROUP"
                ],
                "summary": "Get a list of user groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax."
                    },
                    "404": {
                        "description": "Is returned when groupID does not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "USER_GROUP"
                ],
                "summary": "User group create",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User group",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the request has succeeded and transaction about create new user group has been created",
                        "schema": {
                            "$ref": "#/definitions/model.UserGroup"
                        },
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "404": {
                        "description": "User with ID not exist"
                    },
                    "409": {
                        "description": "Group with that Name already exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/group/{group_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER_GROUP"
                ],
                "summary": "Get user group by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User group identifier. Example: 7d44b88c-4199-4bad-97dc-d78268e01398",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserGroup"
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax."
                    },
                    "403": {
                        "description": "Is returned when userID does not have access to requested group"
                    },
                    "404": {
                        "description": "Is returned when groupID does not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/group/{group_id}/user_add/{user_id}/{access_level}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "USER_GROUP"
                ],
                "summary": "Adding a user to a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the user group",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the user to be added",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Access Level. One of ` + "`" + `admin` + "`" + ` or ` + "`" + `read` + "`" + `",
                        "name": "access_level",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax."
                    },
                    "403": {
                        "description": "Authentication required or user does not have access to change the group"
                    },
                    "404": {
                        "description": "Group or adding user is not exist"
                    },
                    "409": {
                        "description": "The user is already a member of a group"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/group/{group_id}/user_remove/{user_id}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "USER_GROUP"
                ],
                "summary": "Removing a user from a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the user group",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the user to be removed",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax."
                    },
                    "403": {
                        "description": "Authentication required or user does not have access to change the group"
                    },
                    "404": {
                        "description": "Group or adding user is not exist or ` + "`" + `user_id` + "`" + ` is not the member of the group"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "description": "User authentication request",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserAuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JWT"
                        }
                    },
                    "400": {
                        "description": "Password, EhrSystemId or userID incorrect"
                    },
                    "401": {
                        "description": "Password or userID incorrect"
                    },
                    "404": {
                        "description": "User with ID not exist"
                    },
                    "422": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "JWT",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.JWT"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    },
                    "401": {
                        "description": "User unauthorized"
                    },
                    "422": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/refresh/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Refresh JWT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer RefreshToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JWT"
                        }
                    },
                    "401": {
                        "description": "User unauthorized"
                    },
                    "404": {
                        "description": "User with ID not exist"
                    },
                    "422": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    },
                    {
                        "description": "User creation request. ` + "`" + `role` + "`" + `: 0 - Patient, 1 - Doctor. Fields ` + "`" + `Name` + "`" + `, ` + "`" + `Address` + "`" + `, ` + "`" + `Description` + "`" + `, ` + "`" + `PictureURL` + "`" + ` are required for Doctor role",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the request has succeeded and transaction about register new user has been created",
                        "headers": {
                            "RequestID": {
                                "type": "string",
                                "description": "Request identifier"
                            }
                        }
                    },
                    "400": {
                        "description": "The request could not be understood by the server due to incorrect syntax. The client SHOULD NOT repeat the request without modifications."
                    },
                    "409": {
                        "description": "User with that userID already exist"
                    },
                    "422": {
                        "description": "Password, systemID or role incorrect"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        },
        "/user/{user_id}": {
            "get": {
                "description": "Get information about the user by user_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "USER"
                ],
                "summary": "Get user info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier of the requested user info",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer AccessToken",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserId",
                        "name": "AuthUserId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier of the system, typically a reverse domain identifier",
                        "name": "EhrSystemId",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserInfo"
                        }
                    },
                    "400": {
                        "description": "` + "`" + `user_id` + "`" + ` is incorrect or requested user is not a doctor"
                    },
                    "404": {
                        "description": "User with ID not exist"
                    },
                    "500": {
                        "description": "Is returned when an unexpected error occurs while processing a request"
                    }
                }
            }
        }
    },
    "definitions": {
        "base.Archetyped": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "archetype_id": {
                    "type": "string"
                },
                "rm_version": {
                    "type": "string"
                },
                "template_id": {
                    "description": "TODO why link?",
                    "type": "string"
                }
            }
        },
        "base.CodePhrase": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "code_string": {
                    "type": "string"
                },
                "preferred_term": {
                    "type": "string"
                },
                "terminology_id": {
                    "type": "string"
                }
            }
        },
        "base.DvCodedText": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "defining_code": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "encoding": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "formatting": {
                    "type": "string"
                },
                "hyperlink": {
                    "$ref": "#/definitions/base.DvURI"
                },
                "language": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.TermMapping"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "base.DvDateTime": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "accuracy": {
                    "$ref": "#/definitions/base.DvDuration"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "base.DvDuration": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "accuracy": {},
                "accuracy_is_percent": {
                    "type": "boolean"
                },
                "magnitude_status": {
                    "type": "boolean"
                },
                "normal_range": {
                    "$ref": "#/definitions/base.DvInterval-int64"
                },
                "normal_status": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "other_reference_ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.ReferenceRange-int64"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "base.DvEncapsulated": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "charset": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "language": {
                    "$ref": "#/definitions/base.CodePhrase"
                }
            }
        },
        "base.DvIdentifier": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "assigner": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "base.DvInterval-int64": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "lower": {
                    "type": "integer"
                },
                "lower_included": {
                    "type": "boolean"
                },
                "lower_unbounded": {
                    "type": "boolean"
                },
                "upper": {
                    "type": "integer"
                },
                "upper_included": {
                    "type": "boolean"
                },
                "upper_unbounded": {
                    "type": "boolean"
                }
            }
        },
        "base.DvText": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "encoding": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "formatting": {
                    "type": "string"
                },
                "hyperlink": {
                    "$ref": "#/definitions/base.DvURI"
                },
                "language": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.TermMapping"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "base.DvURI": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "base.FeederAudit": {
            "type": "object",
            "properties": {
                "feeder_system_audit": {
                    "$ref": "#/definitions/base.FeederAuditDetails"
                },
                "feeder_system_item_ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.DvIdentifier"
                    }
                },
                "original_content": {
                    "$ref": "#/definitions/base.DvEncapsulated"
                },
                "originating_system_audit": {
                    "$ref": "#/definitions/base.FeederAuditDetails"
                },
                "originating_system_item_ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.DvIdentifier"
                    }
                }
            }
        },
        "base.FeederAuditDetails": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/base.PartyIdentified"
                },
                "other_details": {
                    "$ref": "#/definitions/base.Locatable"
                },
                "provider": {
                    "$ref": "#/definitions/base.PartyIdentified"
                },
                "subject": {
                    "$ref": "#/definitions/base.PartyProxy"
                },
                "system_id": {
                    "type": "string"
                },
                "time": {
                    "$ref": "#/definitions/base.DvDateTime"
                },
                "version_id": {
                    "type": "string"
                }
            }
        },
        "base.Interval-base_DvDateTime": {
            "type": "object",
            "properties": {
                "lower": {
                    "$ref": "#/definitions/base.DvDateTime"
                },
                "lower_included": {
                    "type": "boolean"
                },
                "lower_unbounded": {
                    "type": "boolean"
                },
                "upper": {
                    "$ref": "#/definitions/base.DvDateTime"
                },
                "upper_included": {
                    "type": "boolean"
                },
                "upper_unbounded": {
                    "type": "boolean"
                }
            }
        },
        "base.Interval-int64": {
            "type": "object",
            "properties": {
                "lower": {
                    "type": "integer"
                },
                "lower_included": {
                    "type": "boolean"
                },
                "lower_unbounded": {
                    "type": "boolean"
                },
                "upper": {
                    "type": "integer"
                },
                "upper_included": {
                    "type": "boolean"
                },
                "upper_unbounded": {
                    "type": "boolean"
                }
            }
        },
        "base.ItemStructure": {
            "type": "object"
        },
        "base.ItemType": {
            "type": "string",
            "enum": [
                "EHR",
                "ACTION",
                "AUDIT_DETAILS",
                "ACTIVITY",
                "ARCHETYPED",
                "ARCHETYPE_ID",
                "CLUSTER",
                "CODE_PHRASE",
                "COMPOSITION",
                "CONTRIBUTION",
                "DV_BOOLEAN",
                "DV_CODED_TEXT",
                "DV_COUNT",
                "DV_DATE",
                "DV_DATE_TIME",
                "DV_DURATION",
                "DV_IDENTIFIER",
                "DV_INTERVAL",
                "DV_MULTIMEDIA",
                "DV_ORDERED",
                "DV_PARAGRAPH",
                "DV_PARSABLE",
                "DV_PROPORTION",
                "DV_STATE",
                "DV_QUANTITY",
                "DV_TEXT",
                "DV_TIME",
                "DV_URI",
                "EHR_ACCESS",
                "EHR_STATUS",
                "ELEMENT",
                "EVALUATION",
                "EVENT_CONTEXT",
                "GENERIC_ID",
                "HIER_OBJECT_ID",
                "HISTORY",
                "INSTRUCTION",
                "ISM_TRANSITION",
                "ITEM_SINGLE",
                "ITEM_LIST",
                "ITEM_TABLE",
                "ITEM_TREE",
                "OBJECT_VERSION_ID",
                "OBSERVATION",
                "PARTICIPATION",
                "PARTY_IDENTIFIED",
                "PARTY_REF",
                "PARTY_SELF",
                "PARTY_RELATED",
                "POINT_EVENT",
                "INTERVAL_EVENT",
                "SECTION",
                "TEMPLATE_ID",
                "TERMINOLOGY_ID",
                "ORIGINAL_VERSION",
                "IMPORTED_VERSION",
                "VERSIONED_COMPOSITION",
                "UID_BASED_ID",
                "FOLDER"
            ],
            "x-enum-varnames": [
                "EHRItemType",
                "ActionItemType",
                "AuditDetailsType",
                "ActivityItemType",
                "ArchetypedItemType",
                "ArchetypeIDItemType",
                "ClusterItemType",
                "CodePhraseItemType",
                "CompositionItemType",
                "ContributionItemType",
                "DvBooleanItemType",
                "DvCodedTextItemType",
                "DvCountItemType",
                "DvDateItemType",
                "DvDateTimeItemType",
                "DvDurationItemType",
                "DvIdentifierItemType",
                "DvIntervalItemType",
                "DvMultimediaItemType",
                "DvOrderedItemType",
                "DvParagraphItemType",
                "DvParsableItemType",
                "DvProportionItemType",
                "DvStateItemType",
                "DvQuantityItemType",
                "DvTextItemType",
                "DvTimeItemType",
                "DvURIItemType",
                "EHRAccessItemType",
                "EHRStatusItemType",
                "ElementItemType",
                "EvaluationItemType",
                "EventContextItemType",
                "GenericIDItemType",
                "HierObjectIDItemType",
                "HistoryItemType",
                "InstructionItemType",
                "IsmTransitionItemType",
                "ItemSingleItemType",
                "ItemListItemType",
                "ItemTableItemType",
                "ItemTreeItemType",
                "ObjectVersionIDItemType",
                "ObservationItemType",
                "ParticipationItemType",
                "PartyIdentifiedItemType",
                "PartyRefItemType",
                "PartySelfItemType",
                "PartyRelatedItemType",
                "PointEventItemType",
                "IntervalEventItemType",
                "SectionItemType",
                "TemplateIDItemType",
                "TerminologyIDItemType",
                "VersionOriginalItemType",
                "VersionImportedItemType",
                "VersionCompositionItemType",
                "UIDBasedIDItemType",
                "FolderItemType"
            ]
        },
        "base.Link": {
            "type": "object",
            "properties": {
                "meaning": {
                    "$ref": "#/definitions/base.DvText"
                },
                "target": {
                    "$ref": "#/definitions/base.DvURI"
                },
                "type": {
                    "$ref": "#/definitions/base.DvText"
                }
            }
        },
        "base.Locatable": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "archetype_details": {
                    "$ref": "#/definitions/base.Archetyped"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.Link"
                    }
                },
                "name": {
                    "$ref": "#/definitions/base.DvText"
                },
                "uid": {
                    "$ref": "#/definitions/base.UIDBasedID"
                }
            }
        },
        "base.ObjectRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "base.Participation": {
            "type": "object",
            "properties": {
                "function": {
                    "$ref": "#/definitions/base.DvText"
                },
                "mode": {
                    "$ref": "#/definitions/base.DvCodedText"
                },
                "performer": {
                    "$ref": "#/definitions/base.PartyProxy"
                },
                "time": {
                    "$ref": "#/definitions/base.Interval-base_DvDateTime"
                }
            }
        },
        "base.PartyIdentified": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "external_ref": {
                    "$ref": "#/definitions/base.ObjectRef"
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.DvIdentifier"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "base.PartyProxy": {
            "type": "object"
        },
        "base.ReferenceRange-int64": {
            "type": "object",
            "properties": {
                "meaning": {
                    "type": "string"
                },
                "range": {
                    "$ref": "#/definitions/base.Interval-int64"
                }
            }
        },
        "base.TermMapping": {
            "type": "object",
            "properties": {
                "match": {
                    "type": "integer"
                },
                "purpose": {
                    "$ref": "#/definitions/base.DvCodedText"
                },
                "target": {
                    "$ref": "#/definitions/base.CodePhrase"
                }
            }
        },
        "base.UIDBasedID": {
            "type": "object",
            "properties": {
                "ObjectID": {
                    "type": "string"
                }
            }
        },
        "model.Composition": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "archetype_details": {
                    "$ref": "#/definitions/base.Archetyped"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "category": {
                    "$ref": "#/definitions/base.DvCodedText"
                },
                "composer": {
                    "$ref": "#/definitions/base.PartyProxy"
                },
                "content": {
                    "type": "array",
                    "items": {}
                },
                "context": {
                    "$ref": "#/definitions/model.EventContext"
                },
                "language": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.Link"
                    }
                },
                "name": {
                    "$ref": "#/definitions/base.DvText"
                },
                "territory": {
                    "$ref": "#/definitions/base.CodePhrase"
                },
                "uid": {
                    "$ref": "#/definitions/base.UIDBasedID"
                }
            }
        },
        "model.Directory": {
            "type": "object",
            "properties": {
                "_type": {
                    "$ref": "#/definitions/base.ItemType"
                },
                "archetype_details": {
                    "$ref": "#/definitions/base.Archetyped"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "details": {
                    "$ref": "#/definitions/base.ItemStructure"
                },
                "feeder_audit": {
                    "$ref": "#/definitions/base.FeederAudit"
                },
                "folders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Directory"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DirectoryItem"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.Link"
                    }
                },
                "name": {
                    "$ref": "#/definitions/base.DvText"
                },
                "uid": {
                    "$ref": "#/definitions/base.UIDBasedID"
                }
            }
        },
        "model.DirectoryItem": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/base.UIDBasedID"
                },
                "namespace": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/base.ItemType"
                }
            }
        },
        "model.DocAccessDocument": {
            "type": "object",
            "properties": {
                "CID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                }
            }
        },
        "model.DocAccessDocumentGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DocAccessDocument"
                    }
                },
                "groupID": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "parentGroupID": {
                    "type": "string"
                }
            }
        },
        "model.DocAccessListResponse": {
            "type": "object",
            "properties": {
                "documentGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DocAccessDocumentGroup"
                    }
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DocAccessDocument"
                    }
                }
            }
        },
        "model.DocAccessSetRequest": {
            "type": "object",
            "properties": {
                "accessLevel": {
                    "type": "string"
                },
                "cid": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "model.EhrCreateRequest": {
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "isModifiable": {
                    "type": "boolean"
                },
                "isQueryable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "subject": {
                    "type": "object",
                    "properties": {
                        "external_ref": {
                            "$ref": "#/definitions/model.ExternalRef"
                        }
                    }
                }
            }
        },
        "model.EhrDocumentItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "timeCreated": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "model.EhrStatusUpdate": {
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                },
                "archetype_node_id": {
                    "type": "string"
                },
                "is_modifiable": {
                    "type": "boolean"
                },
                "is_queryable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "other_details": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "archetype_node_id": {
                            "type": "string"
                        },
                        "items": {
                            "type": "array",
                            "items": {}
                        },
                        "name": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "subject": {
                    "type": "object",
                    "properties": {
                        "external_ref": {
                            "$ref": "#/definitions/model.ExternalRef"
                        }
                    }
                },
                "uid": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.EhrSummary": {
            "type": "object",
            "properties": {
                "ehr_access": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "ehr_id": {
                    "type": "string"
                },
                "ehr_status": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                },
                "system_id": {
                    "type": "string"
                },
                "time_created": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.EventContext": {
            "type": "object",
            "properties": {
                "end_time": {
                    "$ref": "#/definitions/base.DvDateTime"
                },
                "health_care_facility": {
                    "$ref": "#/definitions/base.PartyIdentified"
                },
                "location": {
                    "type": "string"
                },
                "other_context": {
                    "$ref": "#/definitions/base.ItemStructure"
                },
                "participations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/base.Participation"
                    }
                },
                "setting": {
                    "$ref": "#/definitions/base.DvCodedText"
                },
                "start_time": {
                    "$ref": "#/definitions/base.DvDateTime"
                }
            }
        },
        "model.ExternalRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "object",
                    "properties": {
                        "_type": {
                            "type": "string"
                        },
                        "scheme": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        }
                    }
                },
                "namespace": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.JWT": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "model.QueryColumn": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "model.QueryRequest": {
            "type": "object",
            "properties": {
                "ehr_id": {
                    "type": "string"
                },
                "fetch": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "q": {
                    "type": "string"
                },
                "query_parameters": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "model.QueryResponse": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.QueryColumn"
                    }
                },
                "meta": {
                    "type": "object",
                    "properties": {
                        "_created": {
                            "type": "string"
                        },
                        "_executed_aql": {
                            "type": "string"
                        },
                        "_generator": {
                            "type": "string"
                        },
                        "_href": {
                            "type": "string"
                        },
                        "_schema_version": {
                            "type": "string"
                        },
                        "_type": {
                            "type": "string"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "q": {
                    "type": "string"
                },
                "rows": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "model.QueryType": {
            "type": "string",
            "enum": [
                "AQL"
            ],
            "x-enum-varnames": [
                "QueryTypeAQL"
            ]
        },
        "model.StoredQuery": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "q": {
                    "type": "string"
                },
                "saved": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/model.QueryType"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.Template": {
            "type": "object",
            "properties": {
                "archetype_id": {
                    "type": "string"
                },
                "concept": {
                    "type": "string"
                },
                "created_timestamp": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.UserAuthRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "pictureURL": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "model.UserGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "groupID": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.UserInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "ehrID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pictureURL": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "timeCreated": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "processing.EthereumTx": {
            "type": "object",
            "properties": {
                "Kind": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                }
            }
        },
        "processing.FileCoinTx": {
            "type": "object",
            "properties": {
                "Kind": {
                    "type": "string"
                },
                "Status": {
                    "type": "string"
                },
                "cid": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "dealCID": {
                    "type": "string"
                },
                "dealID": {
                    "type": "integer"
                },
                "minerAddress": {
                    "type": "string"
                }
            }
        },
        "processing.RequestResult": {
            "type": "object",
            "properties": {
                "ethereum": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/processing.EthereumTx"
                    }
                },
                "filecoin": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/processing.FileCoinTx"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "processing.RequestsResult": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/processing.RequestResult"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "IPEHR Gateway API",
	Description:      "The IPEHR Gateway is an openEHR compliant EHR server implementation that stores encrypted medical data in a Filecoin distributed file storage.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
